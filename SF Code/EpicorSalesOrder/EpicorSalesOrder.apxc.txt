global class EpicorSalesOrder {
	    
	public static Map<String, String> epicorSalesOrderData = new Map<String, String>();

	public static Map<String, String> salesforceSalesOrderData = new Map<String, String>();

    
    @InvocableMethod  //makes this method able to be called by a trigger/flow/etc
    public static void getEpicorOrderHedForOrder_Trigger() {

		//specific hardcoded sales order number just for testing this POC        
		getEpicorOrderHedForOrder_Callout(60501);
		
        //100 doesn't crash, 500 does
        Integer start = System.Now().millisecond();
	        while(System.Now().millisecond()< start+250){ 
        }
        Integer start1 = System.Now().millisecond();
	        while(System.Now().millisecond()< start+250){ 
        }
        
        // ULTIMATELY NEED TO SPLIT OUT THE CREATION OF HEADER & DETAIL RECORDS
        // WHEN AUTOMATING A FULL PULL OF LOTS OF DATA IN A FLOW SITUATION
        // BECAUSE CALLING THIS METHOD DOES NOT WORK DUE TO THE UPDATE OF THE PARENT IN THE METHOD CALLED PREVIOUSLY
        getEpicorOrderDtlForOrder_Callout(60501);

    }

    
    @future (callout=true) //makes this method able to have a callout
    public static void getEpicorOrderHedForOrder_Callout(decimal orderNum) {
    
        Map<String, String> epicorSalesOrderData = new Map<String, String>();
        
        //NOTE: change to use a named credential (PII_Test) for better security and be more dynamic
        String url = 'callout:PII_Test/BaqSvc/GetOrderHedForOrderSF(PI03)/?OrderNum=' + orderNum;
    
integer rowCount = 0;
        
		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes
            
            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req = new HttpRequest();
            req.setEndpoint(url);
            req.setMethod('GET');
            
            Http h = new Http();
            HttpResponse res = h.send(req);
            System.debug(res.getBody());
    
            JSONParser parser = JSON.createParser(res.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:

            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'OrderHed_CustNum' || parser.getText() == 'Terms_Description'
                    || parser.getText() == 'OrderHed_OpenOrder' || parser.getText() == 'OrderHed_OrderDate'
                    || parser.getText() == 'Customer_SFId_c' || parser.getText() == 'OrderHed_OrderNum')) 
                {
                    string fieldName = parser.getText();

rowCount += 1;
                    
                    parser.nextToken();
                    
                    //original trial returning one value
                    //url_result = parser.getText();
                    
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'zzz')
                    {
                        //fieldValue = String.valueOf(decimal.valueOf(parser.getText()));
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }

                    epicorSalesOrderData.put(fieldName, fieldValue);

                    //KEEP: for debugging, to add debug log info
                    //System.debug('url_result: ' + url_result );
                    
                    epicorSalesOrderData.put('Epicor_Status', 'OK');
                    
                }
            }
            
        } catch (DmlException de) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + de );
        }
        catch (Exception e) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + e );
        }

        
        
        //update salesforce data with epicor data:
        EpicorOrderHed__c[] epicorOrderHed;
        

//!!  NEED SOME LOGIC TO DETERMINE IF NEW OR EXISTING RECORD !!
//epicorOrderHed.AccountID__c = epicorSalesOrderData.get('Customer_SFId_c');
//epicorOrderHed.OrderNum__c = epicorSalesOrderData.get('OrderHed_OrderNum');
//epicorOrderHed.Terms__c = epicorSalesOrderData.get('Terms_Description');
//epicorOrderHed.OpenOrder__c = Boolean.valueOf(epicorSalesOrderData.get('OrderHed_OpenOrder'));
//epicorOrderHed.OrderDate__c = Date.valueOf(epicorSalesOrderData.get('OrderHed_OrderDate'));
//upsert epicorOrderHed;
//EpicorOrderHed__c[] zz = new List<EpicorOrderHed__c>();
/*
EpicorOrderHed__c z = new EpicorOrderHed__c(
	Name = String.valueOf(epicorSalesOrderData.get('OrderHed_OrderNum')),  
    AccountID__c = epicorSalesOrderData.get('Customer_SFId_c'), 
	OrderNum__c = 60501
);
insert z;
*/
//zz.add(z);
////EpicorOrderHed__c.add(z);
//insert zz; 
        
		string parentId = '';
        
		//NOTE:  the ":" allows you to substitute a variable value into the select statement
        epicorOrderHed = [SELECT Id,OrderNum__c,Terms__c,OpenOrder__c,OrderDate__c FROM EpicorOrderHed__c WHERE OrderNum__c = :orderNum];

        if (epicorOrderHed.isEmpty()) {
            EpicorOrderHed__c newEpicorOrderHed = new EpicorOrderHed__c(
                Name = String.valueOf(epicorSalesOrderData.get('OrderHed_OrderNum')),  
                AccountID__c = epicorSalesOrderData.get('Customer_SFId_c'), 
                //OrderNum__c = 60501,
                OrderNum__c = Integer.valueof(epicorSalesOrderData.get('OrderHed_OrderNum')),
                
//                Terms__c = epicorSalesOrderData.get('Terms_Description'),
Terms__c = 'rowCount: ' + String.valueOf(rowCount),
                
                OpenOrder__c = Boolean.valueOf(epicorSalesOrderData.get('OrderHed_OpenOrder')),
                OrderDate__c = Date.valueOf(epicorSalesOrderData.get('OrderHed_OrderDate'))
            );
            insert newEpicorOrderHed;
            
            //get the resulting ID of the created record
            parentId = newEpicorOrderHed.Id;

        }        
        else
        {
            for (EpicorOrderHed__c a : epicorOrderHed) {
                a.Terms__c = epicorSalesOrderData.get('Terms_Description');
                a.OpenOrder__c = Boolean.valueOf(epicorSalesOrderData.get('OrderHed_OpenOrder'));
                a.OrderDate__c = Date.valueOf(epicorSalesOrderData.get('OrderHed_OrderDate'));
    
                //for debugging:
                //a.Terms__c = epicorSalesOrderData.get('Epicor_Status').substring(0, 50); // >> ok
                //a.Terms__c = epicorSalesOrderData.get('Epicor_Status'); // >> ok
                //a.Terms__c = 'terms 2';

				parentId = a.Id;
                
            }
    
            try {
                upsert epicorOrderHed;
            } catch (DmlException e) {
                // Process exception here
            }
		}

/*
//zzz
        //-----------
        //update order detail records
integer rowCount2 = 0;

		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes
            
	        String urlOrderDtl = 'callout:PII_Test/BaqSvc/GetOrderDtlForOrderSF(PI03)/?OrderNum=' + orderNum;
            

            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req2 = new HttpRequest();
            req2.setEndpoint(urlOrderDtl);
            req2.setMethod('GET');
            
            Http h2 = new Http();
            HttpResponse res2 = h2.send(req2);
            System.debug(res2.getBody());
    
            JSONParser parser2 = JSON.createParser(res2.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:

//integer rowCount = 0;
while (parser2.nextToken() != null) {
rowCount2 += 1;
}
while(parser2.nextToken() != JSONToken.END_ARRAY) { // we started with an array of objects
//	GetPerson gp = new GetPerson();
//	rowCount += 1;
	while(parser2.nextToken() != JSONToken.END_OBJECT){ // loop through each object
//		rowCount += 1;
		if(parser2.getCurrentToken() == JSONToken.FIELD_NAME) { //token should be field name
//			rowCount += 1;
        }
	}
}

            
        
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'OrderHed_CustNum' || parser.getText() == 'Terms_Description'
                    || parser.getText() == 'OrderHed_OpenOrder' || parser.getText() == 'OrderHed_OrderDate'
                    || parser.getText() == 'Customer_SFId_c' || parser.getText() == 'OrderHed_OrderNum')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                    
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'zzz')
                    {
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }

                    epicorSalesOrderData.put(fieldName, fieldValue);
                                        
                }
            }

            
        } catch (DmlException de) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + de );
        }
        catch (Exception e) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + e );
        }

//hardcoded POC:
EpicorOrderDtl__c newEpicorOrderDtl = new EpicorOrderDtl__c(
	Name = String.valueof(1),  
	//AccountID__c = epicorSalesOrderData.get('Customer_SFId_c'),
	EpicorSalesOrderId__c = parentId,
	//EpicorSalesOrderId__c = String.valueof(epicorSalesOrderData.get('OrderHed_OrderNum')),
    OrderLine__c = 1,
    PartNum__c = 'part',

//    LineDesc__c = 'desc',
    LineDesc__c = 'rowCount: ' + String.valueof(rowCount2),
    
    IUM__c = 'ea',
    OrderQty__c = 42,
    OrderNumOrderLine__c = 'ordernum 1'
    
    
);
insert newEpicorOrderDtl;
*/

        //NOTE:  can't call a 'future' method from a 'future' method (it simply doesn't execute apparently)
		//getEpicorOrderDtlForOrder_Callout(60501);

    }
    
    
    //experiment as it does not seem to work above
    //maybe each callout needs to be separated
    @future (callout=true) //makes this method able to have a callout
    public static void getEpicorOrderDtlForOrder_Callout(decimal orderNum) {
    
        Map<String, String> epicorSalesOrderData = new Map<String, String>();
        
//?temp? to get parent record id since split this code out into it's own method
EpicorOrderHed__c[] epicorOrderHed;
epicorOrderHed = [SELECT Id,OrderNum__c,Terms__c,OpenOrder__c,OrderDate__c FROM EpicorOrderHed__c WHERE OrderNum__c = :orderNum];
string parentId;
for (EpicorOrderHed__c a : epicorOrderHed) {
	parentId = a.Id;
}

//zzz
        //-----------
        //update order detail records
integer rowCount2 = 0;

		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes
            
	        String urlOrderDtl = 'callout:PII_Test/BaqSvc/GetOrderDtlForOrderSF(PI03)/?OrderNum=' + orderNum;
            

            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req2 = new HttpRequest();
            req2.setEndpoint(urlOrderDtl);
            req2.setMethod('GET');
            
            Http h2 = new Http();
            HttpResponse res2 = h2.send(req2);
            System.debug(res2.getBody());
    
            JSONParser parser2 = JSON.createParser(res2.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:

//integer rowCount = 0;
/*
while (parser2.nextToken() != null) {
	//yields 27:
    rowCount2 += 1;
}
*/
while(parser2.nextToken() != JSONToken.END_ARRAY) { // we started with an array of objects

//temp change to see if can swap between create/update:
EpicorOrderDtl__c newEpicorOrderDtl = new EpicorOrderDtl__c();
    
	newEpicorOrderDtl.EpicorSalesOrderId__c = parentId;
    
    //integer orderNum = 0;

	rowCount2 += 1; // >> 1 for each record in the epicor results
    
	while(parser2.nextToken() != JSONToken.END_OBJECT){ // loop through each object
//		rowCount2 += 1;
		if(parser2.getCurrentToken() == JSONToken.FIELD_NAME) { //token should be field name
//			rowCount2 += 1;
            
            string fieldName = parser2.getText();
			parser2.nextToken();
            
            switch on fieldName {
                //when 'OrderDtl_OrderNum' {
		        //    orderNum = Integer.valueof(parser2.getText());
                //}
                when 'OrderDtl_OrderLine' {
		            newEpicorOrderDtl.Name = String.valueof(parser2.getText());
		            newEpicorOrderDtl.OrderLine__c = Integer.valueof(parser2.getText());
                }
                when 'OrderDtl_PartNum' {
		            newEpicorOrderDtl.PartNum__c = String.valueof(parser2.getText());
                }
                when 'OrderDtl_LineDesc' {
		            newEpicorOrderDtl.LineDesc__c = String.valueof(parser2.getText());
                }
                when 'OrderDtl_IUM' {
		            newEpicorOrderDtl.IUM__c = String.valueof(parser2.getText());
                }
                when 'OrderDtl_OrderQty' {
		            newEpicorOrderDtl.OrderQty__c = Decimal.valueof(parser2.getText());
                }

            }
    		newEpicorOrderDtl.OrderNumOrderLine__c = 
            	String.valueof(orderNum) + ' ' 
                + String.valueof(newEpicorOrderDtl.OrderLine__c);
            
            
        }
	}
    
//the insert works perfect, issue is it needs to also update if exists, so needs tweaking
//    insert newEpicorOrderDtl;
    //NO, this does not update a record
    //upsert newEpicorOrderDtl;

//check to see if the record exists in sf or not, then add or update
string orderNumOrderLine = String.valueof(orderNum) + ' ' + String.valueof(newEpicorOrderDtl.OrderLine__c);
//NEED TO ADD THE LINE UP ABOVE, BUT THIS IS TOO SOON!!!!
//ugh, populating the MAP epicorSalesOrderData won't work with multiple records, unless clear inbetween

EpicorOrderDtl__c[] checkEpicorOrderDtl = [SELECT Id,EpicorSalesOrderId__c,Name,OrderLine__c,PartNum__c,LineDesc__c,IUM__c,OrderQty__c,OrderNumOrderLine__c FROM EpicorOrderDtl__c WHERE OrderNumOrderLine__c = :orderNumOrderLine];

    //zzzzzzzzzzz
//next: keep going with this, check for new/change and act appropriately
if (checkEpicorOrderDtl.isEmpty()) {
	insert newEpicorOrderDtl;
}
else {
//	checkEpicorOrderDtl.EpicorSalesOrderId__c = newEpicorOrderDtl.EpicorSalesOrderId__c;
	for (EpicorOrderDtl__c a : checkEpicorOrderDtl) {
		a.EpicorSalesOrderId__c = newEpicorOrderDtl.EpicorSalesOrderId__c;
		a.Name = newEpicorOrderDtl.Name;
		a.OrderLine__c = newEpicorOrderDtl.OrderLine__c;
		a.PartNum__c = newEpicorOrderDtl.PartNum__c;
		a.LineDesc__c = newEpicorOrderDtl.LineDesc__c;
		a.IUM__c = newEpicorOrderDtl.IUM__c;
		a.OrderQty__c = newEpicorOrderDtl.OrderQty__c;
		a.OrderNumOrderLine__c = newEpicorOrderDtl.OrderNumOrderLine__c;
        try {
            upsert checkEpicorOrderDtl;
        } catch (DmlException e) {
            // Process exception here
        }        
    }

}

    
    
}


            
/*            
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'OrderHed_CustNum' || parser.getText() == 'Terms_Description'
                    || parser.getText() == 'OrderHed_OpenOrder' || parser.getText() == 'OrderHed_OrderDate'
                    || parser.getText() == 'Customer_SFId_c' || parser.getText() == 'OrderHed_OrderNum')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                    
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'zzz')
                    {
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }

                    epicorSalesOrderData.put(fieldName, fieldValue);
                                        
                }
            }
*/
            
        } catch (DmlException de) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + de );
        }
        catch (Exception e) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + e );
        }


/*        
//hardcoded POC:
EpicorOrderDtl__c newEpicorOrderDtl = new EpicorOrderDtl__c(
	Name = String.valueof(42),  
	//AccountID__c = epicorSalesOrderData.get('Customer_SFId_c'),
	EpicorSalesOrderId__c = parentId,
	//EpicorSalesOrderId__c = String.valueof(epicorSalesOrderData.get('OrderHed_OrderNum')),
    OrderLine__c = 42,
    PartNum__c = 'part',

//    LineDesc__c = 'desc',
    LineDesc__c = 'rowCount: ' + String.valueof(rowCount2),
    
    IUM__c = 'ea',
    OrderQty__c = 42,
    OrderNumOrderLine__c = 'ordernum 42'
);
insert newEpicorOrderDtl;
*/

    }
    
    
    
    @AuraEnabled  //needed to be able to call it from the aura realm
    public static Map<String,String> getEpicorOrderHedForOrder(decimal orderNum) {
///*

		//NOTE: change to use a named credential for better security and be more dynamic
        //String url = 'https://piiepicor.compudatacloud.com/ERPPIITest/api/v1/BaqSvc/GetInventoryForSF(PI03)/?SFId=\'' + product2ID + '\'';
		String url = 'callout:PII_Test/BaqSvc/GetOrderHedForOrderSF(PI03)/?OrderNum=' + orderNum;

        //for debugging:
        //epicorInventoryData.put('Calculated_OnHand', '2');

		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes, 
            //		and return of variable never happens
            
            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req = new HttpRequest();
            req.setEndpoint(url);
            req.setMethod('GET');
    
            
            Http h = new Http();
            HttpResponse res = h.send(req);
            System.debug(res.getBody());
    
            JSONParser parser = JSON.createParser(res.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:
    
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'OrderHed_CustNum' || parser.getText() == 'Terms_Description'
                    || parser.getText() == 'OrderHed_OpenOrder' || parser.getText() == 'OrderHed_OrderDate'
                    || parser.getText() == 'Customer_SFId_c')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                    
                    //original trial returning one value
                    //url_result = parser.getText();
                    
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'zzz')
                    {
                        //fieldValue = String.valueOf(decimal.valueOf(parser.getText()));
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }
                    
//epicorSalesOrderData.put('Calculated_OnHand', 'x');
                    epicorSalesOrderData.put(fieldName, fieldValue);
                    
                    //KEEP: for debugging, to add debug log info
                    //System.debug('url_result: ' + url_result );
                    
                    epicorSalesOrderData.put('Epicor_Status', 'OK');
                    
                }
            }
        } catch (DmlException de) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + de );
        }
        catch (Exception e) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + e );
        }

        //epicorSalesOrderData.put('Epicor_Status', 'OK');
        

        //update salesforce data with epicor data:
        EpicorOrderHed__c[] epicorOrderHed;
		//NOTE:  the ":" allows you to substitute a variable value into the select statement
        epicorOrderHed = [SELECT Id,OrderNum__c,Terms__c,OpenOrder__c,OrderDate__c FROM EpicorOrderHed__c WHERE OrderNum__c = :orderNum];
        for (EpicorOrderHed__c a : epicorOrderHed) {
            
            a.Terms__c = epicorSalesOrderData.get('Terms_Description');
            a.OpenOrder__c = Boolean.valueOf(epicorSalesOrderData.get('OrderHed_OpenOrder'));
            a.OrderDate__c = Date.valueOf(epicorSalesOrderData.get('OrderHed_OrderDate'));
         
    	}

        try {
            upsert epicorOrderHed;
        } catch (DmlException e) {
            // Process exception here            
        }
//*/
        return epicorSalesOrderData;
         
    }
    
    
    @AuraEnabled  //needed to be able to call it from the aura realm
    public static Map<String,String> getEpicorOrderDtlForOrder(decimal orderNum) {
        //----------------------------------
epicorSalesOrderData.put('Debug_Message', '1');


        //create/update order detail records
integer rowCount2 = 0;
EpicorOrderHed__c[] epicorOrderHed;
                    
//        epicorOrderHed.Clear();
		/*
        if(!epicorOrderHed.isEmpty()){
        	epicorOrderHed.Clear();
        }
		*/

        epicorOrderHed = [SELECT Id,OrderNum__c,Terms__c,OpenOrder__c,OrderDate__c FROM EpicorOrderHed__c WHERE OrderNum__c = :orderNum];
        string parentId;
        for (EpicorOrderHed__c a : epicorOrderHed) {
            parentId = a.Id;
        }

epicorSalesOrderData.put('Debug_Message', '2');

		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes
            
	        String urlOrderDtl = 'callout:PII_Test/BaqSvc/GetOrderDtlForOrderSF(PI03)/?OrderNum=' + orderNum;
            

            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req2 = new HttpRequest();
            req2.setEndpoint(urlOrderDtl);
            req2.setMethod('GET');
epicorSalesOrderData.put('Debug_Message', '2.1');
            
            Http h2 = new Http();
epicorSalesOrderData.put('Debug_Message', '2.2');

// ------------ FAILING HERE ------------:
            HttpResponse res2 = h2.send(req2);
epicorSalesOrderData.put('Debug_Message', '2.3');
            System.debug(res2.getBody());
    
            JSONParser parser2 = JSON.createParser(res2.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:
epicorSalesOrderData.put('Debug_Message', '2.5');
//if(parser2.isEmpty()){
if(res2.getStatus() == 'Forbidden'){
	epicorSalesOrderData.put('Debug_Message', 'Forbidden found'); 
}
//epicorSalesOrderData.put('Debug_Message', res2.getBody());   // > long message
//epicorSalesOrderData.put('Debug_Message', res2.getStatus()); // > Forbidden
if(String.isBlank(res2.getBody())){
	epicorSalesOrderData.put('Debug_Message', 'parser2 is null'); 
}
if(String.isEmpty(res2.getBody())){
	epicorSalesOrderData.put('Debug_Message', 'parser2 is null'); 
}
if(res2.getBody() == ''){
	epicorSalesOrderData.put('Debug_Message', 'parser2 is empty'); 
}
if(res2.getBody() == null){
	epicorSalesOrderData.put('Debug_Message', 'parser2 is null'); 
}
//integer rowCount = 0;
/*
while (parser2.nextToken() != null) {
	//yields 27:
    rowCount2 += 1;
}
*/
while(parser2.nextToken() != JSONToken.END_ARRAY) { // we started with an array of objects

epicorSalesOrderData.put('Debug_Message', '2.6');

//temp change to see if can swap between create/update:
EpicorOrderDtl__c newEpicorOrderDtl = new EpicorOrderDtl__c();
    
	newEpicorOrderDtl.EpicorSalesOrderId__c = parentId;
    
    //integer orderNum = 0;

	rowCount2 += 1; // >> 1 for each record in the epicor results
    
	while(parser2.nextToken() != JSONToken.END_OBJECT){ // loop through each object
//		rowCount2 += 1;
		if(parser2.getCurrentToken() == JSONToken.FIELD_NAME) { //token should be field name
//			rowCount2 += 1;
            
            string fieldName = parser2.getText();
			parser2.nextToken();
            
            switch on fieldName {
                //when 'OrderDtl_OrderNum' {
		        //    orderNum = Integer.valueof(parser2.getText());
                //}
                when 'OrderDtl_OrderLine' {
		            newEpicorOrderDtl.Name = String.valueof(parser2.getText());
		            newEpicorOrderDtl.OrderLine__c = Integer.valueof(parser2.getText());
                }
                when 'OrderDtl_PartNum' {
		            newEpicorOrderDtl.PartNum__c = String.valueof(parser2.getText());
                }
                when 'OrderDtl_LineDesc' {
		            //newEpicorOrderDtl.LineDesc__c = String.valueof(parser2.getText());
		            if((String.valueof(parser2.getText())).length() > 50){
			            newEpicorOrderDtl.LineDesc__c = (String.valueof(parser2.getText()).Left(50));   
                    }
                    else {
			            newEpicorOrderDtl.LineDesc__c = String.valueof(parser2.getText());                        
                    }
                }
                when 'OrderDtl_IUM' {
		            newEpicorOrderDtl.IUM__c = String.valueof(parser2.getText());
                }
                when 'OrderDtl_OrderQty' {
		            newEpicorOrderDtl.OrderQty__c = Decimal.valueof(parser2.getText());
                }

            }
    		newEpicorOrderDtl.OrderNumOrderLine__c = 
            	String.valueof(orderNum) + ' ' 
                + String.valueof(newEpicorOrderDtl.OrderLine__c);
            
epicorSalesOrderData.put('Debug_Message', '3.0');
            
        }
	}
//epicorSalesOrderData.put('Debug_Message', '3');
    
//the insert works perfect, issue is it needs to also update if exists, so needs tweaking
//    insert newEpicorOrderDtl;
    //NO, this does not update a record
    //upsert newEpicorOrderDtl;

//check to see if the record exists in sf or not, then add or update
string orderNumOrderLine = String.valueof(orderNum) + ' ' + String.valueof(newEpicorOrderDtl.OrderLine__c);
//NEED TO ADD THE LINE UP ABOVE, BUT THIS IS TOO SOON!!!!
//ugh, populating the MAP epicorSalesOrderData won't work with multiple records, unless clear inbetween

EpicorOrderDtl__c[] checkEpicorOrderDtl = [SELECT Id,EpicorSalesOrderId__c,Name,OrderLine__c,PartNum__c,LineDesc__c,IUM__c,OrderQty__c,OrderNumOrderLine__c FROM EpicorOrderDtl__c WHERE OrderNumOrderLine__c = :orderNumOrderLine];

epicorSalesOrderData.put('Debug_Message', '3.1');
    //zzzzzzzzzzz
//next: keep going with this, check for new/change and act appropriately
if (checkEpicorOrderDtl.isEmpty()) {
epicorSalesOrderData.put('Debug_Message', '3.2');
	insert newEpicorOrderDtl;
}
else {
//	checkEpicorOrderDtl.EpicorSalesOrderId__c = newEpicorOrderDtl.EpicorSalesOrderId__c;
	for (EpicorOrderDtl__c a : checkEpicorOrderDtl) {
       
        //error: System.SObjectException: Field is not writeable: EpicorOrderDtl__c.EpicorSalesOrderId__c
		//a.EpicorSalesOrderId__c = newEpicorOrderDtl.EpicorSalesOrderId__c;
        
        
//epicorSalesOrderData.put('Debug_Message', '3.5 ' + newEpicorOrderDtl.Name);
		a.Name = newEpicorOrderDtl.Name;
		a.OrderLine__c = newEpicorOrderDtl.OrderLine__c;
		a.PartNum__c = newEpicorOrderDtl.PartNum__c;
		a.LineDesc__c = newEpicorOrderDtl.LineDesc__c;
		a.IUM__c = newEpicorOrderDtl.IUM__c;
		a.OrderQty__c = newEpicorOrderDtl.OrderQty__c;
		a.OrderNumOrderLine__c = newEpicorOrderDtl.OrderNumOrderLine__c;
        try {
            upsert checkEpicorOrderDtl;
        } catch (DmlException e) {
epicorSalesOrderData.put('Debug_Message', String.valueof(e));
            // Process exception here
        } catch (Exception ex) {
epicorSalesOrderData.put('Debug_Message', String.valueof(ex));
            // Process exception here
        }        
    }

}

    
    
}


            
/*            
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'OrderHed_CustNum' || parser.getText() == 'Terms_Description'
                    || parser.getText() == 'OrderHed_OpenOrder' || parser.getText() == 'OrderHed_OrderDate'
                    || parser.getText() == 'Customer_SFId_c' || parser.getText() == 'OrderHed_OrderNum')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                    
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'zzz')
                    {
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }

                    epicorSalesOrderData.put(fieldName, fieldValue);
                                        
                }
            }
*/
            
        } catch (DmlException de) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + de );
        }
        catch (Exception e) {
            epicorSalesOrderData.put('Epicor_Status', 'Epicor Error: ' + e );
        }


/*        
//hardcoded POC:
EpicorOrderDtl__c newEpicorOrderDtl = new EpicorOrderDtl__c(
	Name = String.valueof(42),  
	//AccountID__c = epicorSalesOrderData.get('Customer_SFId_c'),
	EpicorSalesOrderId__c = parentId,
	//EpicorSalesOrderId__c = String.valueof(epicorSalesOrderData.get('OrderHed_OrderNum')),
    OrderLine__c = 42,
    PartNum__c = 'part',

//    LineDesc__c = 'desc',
    LineDesc__c = 'rowCount: ' + String.valueof(rowCount2),
    
    IUM__c = 'ea',
    OrderQty__c = 42,
    OrderNumOrderLine__c = 'ordernum 42'
);
insert newEpicorOrderDtl;
*/


        
        
        //----------------------------------
        
        
        
        return epicorSalesOrderData;
         
    }
    

    public static String currency(String i) {
        // - Error this doesn't handle negative number converts -15 to -14.999  instead of -15.001 before round
        //String s = ( Decimal.valueOf(i==null||i.trim()==''?'0':i).setScale(2) + 0.001 ).format();
        //return s.substring(0,s.length()-1);
    
        if (( i == null) || ( i == ''))
        {
            return '0';
        }
        else
        {
            string s;
            if ( Decimal.valueOf(i) >= 0 )
            {
                s =  ( Decimal.valueOf(i).setScale(2) + 0.001 ).format();
            }
            else
            {
                s = ( Decimal.valueOf(i).setScale(2) - 0.001 ).format();
            }
	        return s.substring(0,s.length()-1);
        }
    
    }
        
}