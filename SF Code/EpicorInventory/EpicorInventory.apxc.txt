global class EpicorInventory 
{

    public static String url_result = 'xyz';
    public static Map<String, String> epicorInventoryData = new Map<String, String>();
    public static Map<String, String> salesforceProduct2Data = new Map<String, String>();

    @AuraEnabled  //needed to be able to call it from the aura realm
    public static Map<String,String> getInventory(string product2ID) {        
        return epicorInventoryData;
    }
    
    //KEEP: not sure if commented out for unit testing, or for regular use, keep just in case
    //@future (callout=true)
    @AuraEnabled  //needed to be able to call it from the aura realm
    public static Map<String,String> getEpicorInventory(string product2ID) {
        
        // KEEP THIS AS MAY WANT TO PULL PART DATA LATER
		//getEpicorInventory2('https://piiepicor.compudatacloud.com/ERPPIITest/api/v1/Erp.BO.PartSvc/Parts?$select=PartNum&$filter=SFId_c%20eq%20\'01t1U000004uRvjQAE\' ');
		//getEpicorInventory2('https://piiepicor.compudatacloud.com/ERPPIITest/api/v1/Erp.BO.PartSvc/Parts?$select=PartNum,SFId_c&$filter=SFId_c%20eq%20\'' + product2ID + 
        //ok, let's change it to use the baq:
		//getEpicorInventory2('https://piiepicor.compudatacloud.com/ERPPIITest/api/v1/BaqSvc/GetInventoryForSF(PI03)/?SFId=\'' + product2ID + '\'');        

        //NOTE: change to use a named credential for better security and be more dynamic
        //String url = 'https://piiepicor.compudatacloud.com/ERPPIITest/api/v1/BaqSvc/GetInventoryForSF(PI03)/?SFId=\'' + product2ID + '\'';
		String url = 'callout:PII_Test/BaqSvc/GetInventoryForSF(PI03)/?SFId=' + product2ID;

        //for debugging:
        //epicorInventoryData.put('Calculated_OnHand', '2');

		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes, 
            //		and return of variable never happens
            
            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req = new HttpRequest();
            req.setEndpoint(url);
            req.setMethod('GET');
    
            //KEEP, may need for something else: not need anymore since now using a named credential
            /*
            String username = 'username';
            String password = 'password';
            Blob headerValue = Blob.valueOf(username + ':' + password);
            String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);
            req.setHeader('Authorization', authorizationHeader);
            */
            
            Http h = new Http();
            HttpResponse res = h.send(req);
            System.debug(res.getBody());
    
            JSONParser parser = JSON.createParser(res.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:
    
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'Part_PartNum' || parser.getText() == 'Calculated_OnHand'
                    || parser.getText() == 'Calculated_Allocated' || parser.getText() == 'Calculated_Demand'
                    || parser.getText() == 'Calculated_Available')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                    
                    //original trial returning one value
                    //url_result = parser.getText();
                    
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'Calculated_Allocated' || fieldName == 'Calculated_Demand'
                       || fieldName == 'Calculated_Available')
                    {
                        //fieldValue = String.valueOf(decimal.valueOf(parser.getText()));
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }
                    
                    epicorInventoryData.put(fieldName, fieldValue);
                    
                    //KEEP: for debugging, to add debug log info
                    //System.debug('url_result: ' + url_result );
                    
                    epicorInventoryData.put('Epicor_Status', 'OK');
                    
                }
            }
        } catch (DmlException de) {
            epicorInventoryData.put('Epicor_Status', 'Epicor Error: ' + de );
        }
        catch (Exception e) {
            epicorInventoryData.put('Epicor_Status', 'Epicor Error: ' + e );
        }

        epicorInventoryData.put('Epicor_Status', 'OK');
        
        //update salesforce data with epicor data:
        Product2[] product2;
		//NOTE:  the ":" allows you to substitute a variable value into the select statement
        product2 = [SELECT Id,Name,EpicorOnHand__c,EpicorAllocated__c,EpicorDemand__c,EpicorAvailable__c,EpicorInvDateLast__c FROM Product2 WHERE Id = :product2ID];
        for (Product2 a : product2) {
            a.EpicorOnHand__c = decimal.valueOf(epicorInventoryData.get('Calculated_OnHand'));
            a.EpicorAllocated__c = decimal.valueOf(epicorInventoryData.get('Calculated_Allocated'));
            a.EpicorDemand__c = decimal.valueOf(epicorInventoryData.get('Calculated_Demand'));
            a.EpicorAvailable__c = decimal.valueOf(epicorInventoryData.get('Calculated_Available'));

            datetime currDate = datetime.now();
            a.EpicorInvDateLast__c = currDate;
                        
    	}

        try {
            upsert product2;
        } catch (DmlException e) {
            // Process exception here            
        }

        return epicorInventoryData;
        
    }
    
    
	@AuraEnabled  //needed to be able to call it from the aura realm
    public static Map<String,String> getSalesforceProduct2(string product2ID) {		
        
        Product2[] product2;
		//NOTE:  the ":" allows you to substitute a variable value into the select statement
        product2 = [SELECT Id,Name,EpicorOnHand__c,EpicorAllocated__c,EpicorDemand__c,EpicorAvailable__c,EpicorInvDateLast__c FROM Product2 WHERE Id = :product2ID];
    
        for (Product2 a : product2) {
            salesforceProduct2Data.put('Name', a.Name);
		    salesforceProduct2Data.put('EpicorOnHand', String.valueOf(a.EpicorOnHand__c));
		    
            salesforceProduct2Data.put('EpicorAllocated', String.valueOf(a.EpicorAllocated__c));
            salesforceProduct2Data.put('EpicorDemand', String.valueOf(a.EpicorDemand__c));
            salesforceProduct2Data.put('EpicorAvailable', String.valueOf(a.EpicorAvailable__c));
            
            datetime epicorInvDateLast = a.EpicorInvDateLast__c;
            salesforceProduct2Data.put('EpicorInvDateLast', epicorInvDateLast.format('MM/dd/YYYY h:mm:ss a'));


			//for testing:
            //a.EpicorOnHand__c = 50;
            //a.EpicorAllocated__c = 5;
            //a.EpicorDemand__c = 15;
            //a.EpicorAvailable__c = 30;
            //a.Description = 'Red Widget';
            //upsert product2;
            
    	}

        try {
            //keep:
            //upsert product2;
        } catch (DmlException e) {
            // Process exception here
        }

        return salesforceProduct2Data;
        
    }
    
    public static String currency(String i) {
        // - Error this doesn't handle negative number converts -15 to -14.999  instead of -15.001 before round
        //String s = ( Decimal.valueOf(i==null||i.trim()==''?'0':i).setScale(2) + 0.001 ).format();
        //return s.substring(0,s.length()-1);
    
        if (( i == null) || ( i == ''))
        {
            return '0';
        }
        else
        {
            string s;
            if ( Decimal.valueOf(i) >= 0 )
            {
                s =  ( Decimal.valueOf(i).setScale(2) + 0.001 ).format();
            }
            else
            {
                s = ( Decimal.valueOf(i).setScale(2) - 0.001 ).format();
            }
	        return s.substring(0,s.length()-1);
        }
    
    }
    
    private static void sleep(integer milliseconds) 
    {
        Long timeDiff = 0;
        DateTime firstTime = System.now();
        do
        {
            timeDiff = System.now().getTime() - firstTime.getTime();
        }
        while(timeDiff <= milliseconds);      
    }
    
    
}