({
	helperMethod : function() 
    {
		
	},
        
    getSalesforceProduct2 : function(component) 
    {
        //alert("hello");
        
		var product2ID = component.get("v.recordId");
		var salesforceProduct2 = component.get("c.getSalesforceProduct2");
        salesforceProduct2.setParams({"product2ID":product2ID});

        //for debugging:
        //component.set("v.lblSalesforceUpdateStatus", "1");

        //NOTE: not sure why all this is necessary (instead of just 'component.set("v.buttonLabel", name);'), but it is
        salesforceProduct2.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                
                //returns a dictionary with known values in each pair:
                var salesforceProduct2Data = response.getReturnValue();

                //for debugging:
                //component.set("v.lblSalesforceUpdateStatus", salesforceProduct2Data["Name"]);

                component.set("v.valueOnHand", salesforceProduct2Data["EpicorOnHand"]);
                component.set("v.valueAllocated", salesforceProduct2Data["EpicorAllocated"]);
                component.set("v.valueDemand", salesforceProduct2Data["EpicorDemand"]);
                component.set("v.valueAvailable", salesforceProduct2Data["EpicorAvailable"]);
				component.set("v.valueLastUpdated", salesforceProduct2Data["EpicorInvDateLast"]);

				component.set("v.lblSalesforceUpdateStatus", "Salesforce Status: OK");
                
                //refresh the form
				$A.get('e.force:refreshView').fire();
            }
            else {
                //console.log("Failed with state: " + state);

                //note: state is always "ERROR" if it fails it seems
                //component.set("v.lblSalesforceUpdateStatus", "Failed with state: " + state);

                let errors = response.getError();
                let message = 'Unknown error'; // Default error message
                // Retrieve the error message sent by the server
                if (errors && Array.isArray(errors) && errors.length > 0) {
                    message = errors[0].message;
                }
                // Display the message
                //console.error(message);
				component.set("v.lblSalesforceUpdateStatus", "Salesforce Status: " + message);
                
            }
        });
        $A.enqueueAction(salesforceProduct2);
        
    },
    
    getEpicorInventory : function(component) 
    {
                
        var product2ID = component.get("v.recordId");
        //for testing:
		//component.set("v.lblRefresh", product2ID);

        //instantiate getEpicorInventory which actually resides in EpicorInventory.apxc apex code,
        //	which is referenced in the controller EpicorInventory.cmp as a controller itself in the definition up top
		var epicorInventory = component.get("c.getEpicorInventory");        
        epicorInventory.setParams({"product2ID":product2ID});

        //for debugging:
        //component.set("v.lblRefresh", "1");

        //NOTE: not sure why all this is necessary (instead of just 'component.set("v.buttonLabel", name);'), but it is
        epicorInventory.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                //returning a string:
                //component.set("v.buttonLabel", response.getReturnValue());

                //returning a dictionary with known values in each pair:
                var epicorInventoryData = response.getReturnValue();
                
                /*
                //keep this code. originally displayed from here, then changed concept.  may need to revisit.
                component.set("v.valueOnHand", epicorInventoryData["Calculated_OnHand"]);
                component.set("v.valueAllocated", epicorInventoryData["Calculated_Allocated"]);
                component.set("v.valueDemand", epicorInventoryData["Calculated_Demand"]);
                component.set("v.valueAvailable", epicorInventoryData["Calculated_Available"]);
                */
                component.set("v.lblEpicorUpdateStatus", "Epicor Status: OK");

            }
            else {
                //console.log("Failed with state: " + state);
                //component.set("v.lblEpicorUpdateStatus", "Epicor Status: Failed with " + state);
                let errors = response.getError();
                let message = 'Unknown error'; // Default error message
                // Retrieve the error message sent by the server
                if (errors && Array.isArray(errors) && errors.length > 0) {
                    //message = errors[0].message;
                    //string[] responseErrors = errors;
                    //for (Integer i : errors.length) {
                    message = '';
					for (var i = 0; i < errors.length; i++) {
                        if (message != ''){
                            message += ' / ';
                        }
					    message += errors[i].message;
                        if (errors[i].message = 'Argument cannot be null.'){
                            message += ' (could be bad login/pwd) ';
                        }
                    }
                }
                // Display the message
				component.set("v.lblEpicorUpdateStatus", "Epicor Status: " + message);

            }
        });
        $A.enqueueAction(epicorInventory);

        
    } ,
    
 
})