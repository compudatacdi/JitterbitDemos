({
	myAction : function(component, event, helper) {
		
	}, 
        

    doInit : function(component, event, helper) 
    {
        //alert("doInit"); 
        
        //get and store the product on the current sf opportunity line item
		helper.getOpportunityLineItemProductCode(
            component, event, helper, 
            function(){
            }
        );

    },


	//handleProductCodeChange   /  handleValueChange 
    handleProductCodeChange : function (component, event, helper) {
        //alert("old value: " + event.getParam("oldValue"));
        //alert("current value: " + event.getParam("value"));

        var strPartNum = event.getParam("value");
        
        //get and store the epicor part info
        helper.getEpicorPart(
            component, event, helper, 
            strPartNum,
            function(){                
            }    
        );

    },
       

    //https://salesforce.stackexchange.com/questions/211053/accessing-data-in-the-controller-and-app-file-that-is-returned-from-a-helper-fun/211054#211054
    handle_btnGetPricing_poc_this_works : function(component, event, helper) 
    {
		helper.loadData(component, event, helper, "part x", function(){
			component.set("v.strPriceCode1", component.get("v.strPriceCodeTemp"));
		}); 

        helper.loadData(component, event, helper, "part z", function(){
			component.set("v.strPriceCode2", component.get("v.strPriceCodeTemp"));
      	}); 
                
    },
    
    handle_btnGetPricing : function(component, event, helper) 
    {
        
//zzz
//component.set("v.strDebugMessage", " / xxxx ");
//yields nothing:
//alert(document.getElementById(elementFocus.id));
//yields "undefined": 
//alert(document.activeElement.id);
//yields "SecureElement: [object HTMLBodyElement]{ key: {"namespace":"c"} }":
//alert(event.target);
//alert(event.currentTarget);
        //// !!!  yields "btnGetPricing": 
//alert(event.getSource().get("v.name"));




        if(component.get("v.strMessage").indexOf("Epicor Error") != -1){
            //note: make user fix connection error before trying to get pricing
	        if(component.get("v.strMessage").indexOf("Invalid UOM") != -1){
                //note: exception since they can fix this on the form 
            }
            else{
                alert("Please fix Epicor Error and hit refresh before continuing.");
                return;
            }
        }
            
        component.set("v.strMessage", "Retrieving Information....");
        component.set("v.strDebugMessage", "");

        component.set("v.strPrice1", "");
        component.set("v.dExtPrice1", "");
		component.set("v.strPriceCode1", ""); 
        component.set("v.strPrice2", "");
        component.set("v.dExtPrice2", "");
        component.set("v.strPriceCode2", ""); 
        component.set("v.strPrice3", "");
        component.set("v.dExtPrice3", "");
        component.set("v.strPriceCode3", ""); 
        component.set("v.strPrice4", "");
        component.set("v.dExtPrice4", "");
        component.set("v.strPriceCode4", ""); 
        component.set("v.strPrice5", "");
        component.set("v.dExtPrice5", "");
        component.set("v.strPriceCode5", "");
        
        component.set("v.strCurrentInputField", "");

        component.set('v.blnLoaded', false);
        var strPartNum = component.get("v.strOpportunityLineItemProductCode");
        
        helper.getEpicorPricing(
            component, event, helper, 
            component.get("v.strEpicorCustId"),
            strPartNum,
            component.get("v.dQuantity1"),
            component.get("v.strUOM1"),

            function(){
                if(component.get("v.strMessage").indexOf('Error') == -1  
                  || component.get("v.strMessage").indexOf('Invalid UOM') != -1){
					if(component.get("v.strMessage").indexOf('Invalid UOM') == -1  ){
                        component.set("v.strPrice1", component.get("v.strPriceTemp"));
						component.set("v.dExtPrice1", component.get("v.dExtPriceTemp"));
                        component.set("v.strPriceCode1", component.get("v.strPriceCodeTemp"));
                        component.set("v.strMessage", "Epicor Data Loaded");
                    }
                    else{
                        component.set("v.strPriceCode1", "Invalid UOM");
                        component.set("v.strMessage", "Epicor Data Loaded");
                    }

                    //getRestOfPricing(); 
                    //var getRestOfPricing = component.get('c.getRestOfPricing');
                    //$A.enqueueAction(getRestOfPricing);

                    //note: tried breaking this out to it's own method, but strange things happen
                    if(component.get("v.dQuantity2") != 0)
                    {
                        component.set('v.blnLoaded', false);
                        helper.getEpicorPricing(
                            component, event, helper, 
                            component.get("v.strEpicorCustId"),
                            strPartNum,
                            component.get("v.dQuantity2"),
				            component.get("v.strUOM2"),
                            function(){
								if(component.get("v.strMessage").indexOf('Invalid UOM') == -1  ){
                                    component.set("v.strPrice2", component.get("v.strPriceTemp"));
									component.set("v.dExtPrice2", component.get("v.dExtPriceTemp"));
                                    component.set("v.strPriceCode2", component.get("v.strPriceCodeTemp")); 
                                    component.set("v.strMessage", "Epicor Data Loaded");
                                    component.set('v.blnLoaded', true);
//zzz
//component.set("v.strDebugMessage", "  / x1.4  ");
//this kills the run with no error
//component.find("inputQuantity2").focus();
//component.find("inputField1").focus();
                                    
//component.set("v.strDebugMessage", "  / xxxx  ");

                                } 
                                else{
                                    component.set("v.strPriceCode2", "Invalid UOM");
                                    component.set("v.strMessage", "Epicor Data Loaded");           
                                }
                                
                            }
                        ); 
                    };
                    
                    
                    if(component.get("v.dQuantity3") != 0) 
                    {
                        component.set('v.blnLoaded', false);
                        helper.getEpicorPricing(
                            component, event, helper, 
                            component.get("v.strEpicorCustId"),
                            strPartNum,
                            component.get("v.dQuantity3"),
				            component.get("v.strUOM3"),
                            function(){
                                if(component.get("v.strMessage").indexOf('Invalid UOM') == -1  ){
                                    component.set("v.strPrice3", component.get("v.strPriceTemp"));
                                    component.set("v.dExtPrice3", component.get("v.dExtPriceTemp"));
                                    component.set("v.strPriceCode3", component.get("v.strPriceCodeTemp"));
                                    component.set("v.strMessage", "Epicor Data Loaded");
                                    component.set('v.blnLoaded', true);
                                }
                                else{
                                    component.set("v.strPriceCode3", "Invalid UOM");
                                    component.set("v.strMessage", "Epicor Data Loaded");         
                                }
                            }
                        ); 
                    };
            
                    if(component.get("v.dQuantity4") != 0)
                    {
                        component.set('v.blnLoaded', false);
                        helper.getEpicorPricing(
                            component, event, helper, 
                            component.get("v.strEpicorCustId"),
                            strPartNum,
                            component.get("v.dQuantity4"),
				            component.get("v.strUOM4"),
                            function(){
                                if(component.get("v.strMessage").indexOf('Invalid UOM') == -1  ){
                                    component.set("v.strPrice4", component.get("v.strPriceTemp"));
                                    component.set("v.dExtPrice4", component.get("v.dExtPriceTemp"));
                                    component.set("v.strPriceCode4", component.get("v.strPriceCodeTemp")); 
                                    component.set("v.strMessage", "Epicor Data Loaded");
                                    component.set('v.blnLoaded', true);
                                }
                                else{
                                    component.set("v.strPriceCode4", "Invalid UOM");
                                    component.set("v.strMessage", "Epicor Data Loaded");         
                                }

                            }
                        ); 
                    };
            
                    if(component.get("v.dQuantity5") != 0)
                    {
                        component.set('v.blnLoaded', false);
                        helper.getEpicorPricing(
                            component, event, helper, 
                            component.get("v.strEpicorCustId"),
                            strPartNum,
                            component.get("v.dQuantity5"),
				            component.get("v.strUOM5"),
                            function(){
                                if(component.get("v.strMessage").indexOf('Invalid UOM') == -1  ){
                                    component.set("v.strPrice5", component.get("v.strPriceTemp"));
                                    component.set("v.dExtPrice5", component.get("v.dExtPriceTemp"));
                                    component.set("v.strPriceCode5", component.get("v.strPriceCodeTemp")); 
                                    component.set("v.strMessage", "Epicor Data Loaded");
                                    component.set('v.blnLoaded', true);
                                }
                                else{
                                    component.set("v.strPriceCode5", "Invalid UOM");
                                    component.set("v.strMessage", "Epicor Data Loaded");
                                }

                            } 
                        ); 
                    };

                    
                }
                
				component.set('v.blnLoaded', true);

            }
        );
        
                
        /*
        var getRestOfPricing = component.get('c.getRestOfPricing');
        $A.enqueueAction(getRestOfPricing);
        */
        
		/*
        if(component.get("v.valueQuantity2") != 0)
        {
			component.set('v.loaded', false);
            helper.getEpicorPricing(
                component, event, helper, 
	            component.get("v.epicorCustId"),
                strPartNum,
                component.get("v.valueQuantity2"),
                component.get("v.epicorPartUOM"),
                function(){
                    component.set("v.valuePrice2", component.get("v.valuePriceTemp"));
                    component.set("v.valuePriceCode2", component.get("v.valuePriceCodeTemp")); 
			        component.set("v.lblMessage", "Epicor Data Loaded");
					component.set('v.loaded', true);
                }
            ); 
        };
        
        
        if(component.get("v.valueQuantity3") != 0)
        {
			component.set('v.loaded', false);
            helper.getEpicorPricing(
                component, event, helper, 
                component.get("v.epicorCustId"),
                strPartNum,
                component.get("v.valueQuantity3"),
                component.get("v.epicorPartUOM"),
                function(){
                    component.set("v.valuePrice3", component.get("v.valuePriceTemp"));
                    component.set("v.valuePriceCode3", component.get("v.valuePriceCodeTemp"));
			        component.set("v.lblMessage", "Epicor Data Loaded");
					component.set('v.loaded', true);
                }
            ); 
        };

        if(component.get("v.valueQuantity4") != 0)
        {
			component.set('v.loaded', false);
            helper.getEpicorPricing(
                component, event, helper, 
	            component.get("v.epicorCustId"),
                strPartNum,
                component.get("v.valueQuantity4"),
                component.get("v.epicorPartUOM"),
                function(){
                    component.set("v.valuePrice4", component.get("v.valuePriceTemp"));
                    component.set("v.valuePriceCode4", component.get("v.valuePriceCodeTemp")); 
			        component.set("v.lblMessage", "Epicor Data Loaded");
					component.set('v.loaded', true);
                }
            ); 
        };

        if(component.get("v.valueQuantity5") != 0)
        {
			component.set('v.loaded', false);
            helper.getEpicorPricing(
                component, event, helper, 
	            component.get("v.epicorCustId"),
                strPartNum,
                component.get("v.valueQuantity5"),
                component.get("v.epicorPartUOM"),
                function(){
                    component.set("v.valuePrice5", component.get("v.valuePriceTemp"));
                    component.set("v.valuePriceCode5", component.get("v.valuePriceCodeTemp")); 
			        component.set("v.lblMessage", "Epicor Data Loaded");
					component.set('v.loaded', true);
                } 
            ); 
        };
		*/ 

//zzz
//component.find("inputQuantity2").focus()
//component.find("inputField1").focus();

//NOTE: this works on the "aura:id" in the definition, not the "name"
//	    this prevents any code after it from executing 
//component.find("inputQuantity2").focus();
//going to the next level.....

//component.set("v.strDebugMessage", "  / xxx   ");
//var strCurrentObjectID = "inputQuantity1";
////component.set("v.strDebugMessage", strCurrentObjectID);
//component.find(strCurrentObjectID).focus();

        
        
    },
    
//zzz 
    onKeyUp: function(component, event, helper)
    {
        //helper.doKeyUp(component, event);
        alert("key up"); 
    },
//zzz 
    onKeyDown: function(component, event, helper)
    {
        //helper.doKeyUp(component, event);
        
        //yields "undefined":
        //alert("key down: " + event.which);
        
        /*
component.set("v.strDebugMessage", "  / 1 ");
        var whichOne = event.getSource().getLocalId();         
component.set("v.strDebugMessage", "  / 2 ");
        var mycmp = component.find(whichOne);
component.set("v.strDebugMessage", "  / 3 ");
        //console.log(whichOne + '=' + mycmp.get("v.value"));
        //bombs here:
        alert("key down: " + whichOne + '=' + mycmp.get("v.value"));
        */

        //yields "undefined":
		//alert("key down: " + event.getParam('keyCode'));

        //yields "undefined":
        /*
component.set("v.strDebugMessage", "  / 1 ");
		alert("key down: " + event.getParams().keyCode);
component.set("v.strDebugMessage", "  / 2 ");
        */
        
        //helper.doKeyDown(component, event);
        
        //yields "undefined":
        //alert("key down: " + event.keyCode);
        
    },
    

//zzz  
	keyQtyCheck : function(component, event, helper){
        //being executed from the span
        
        //yields:   keyCheck: SecureElement: [object HTMLSpanElement]{ key: {"namespace":"c"} }
        //alert("keyCheck: " + event.currentTarget);
        
        //alert("keyCheck: " + event.keyCode);

        //yields:   keyCheck: SecureDOMEvent: [object KeyboardEvent]{ key: {"namespace":"c"} }
        //alert("keyCheck: " + event);
        //yields:  keyCheck: SecureComponent: markup://c:CDIEpicorPricing {2834:0}{ key: {"namespace":"c"} }
        //alert("keyCheck: " + component);
        
        //bombs:
        //alert("keyCheck: " + event.getSource());
        //alert("keyCheck: " + event.getSource().get("v.value"));
        //nothing:
        //alert("keyCheck: " + event.target.id.split("-").shift().trim());
        //alert("keyCheck: " + event.target.id);
        //yields "undefined":
        //alert("keyCheck: " + event.target.value);

/*
component.set("v.strDebugMessage", "  / 1X ");
        //BOMBS HERE:
        var whichOne = event.getSource().getLocalId();       
component.set("v.strDebugMessage", "  / 2 ");
        var mycmp = component.find(whichOne);
component.set("v.strDebugMessage", "  / 3 ");
        //console.log(whichOne + '=' + mycmp.get("v.value"));
        //bombs here:
        alert("keyCheck: " + whichOne + '=' + mycmp.get("v.name"));
*/
        
        //THIS WORKS!!!
        if (event.keyCode == 9) {
        	event.preventDefault();
            
//event.stopPropagation();
            
            //works:
            //component.find("inputUOM1").focus();

            if(component.get("v.strCurrentInputField") == "inputQuantity1"){
                component.find("inputUOM1").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputQuantity2"){
                component.find("inputUOM2").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputQuantity3"){
                component.find("inputUOM3").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputQuantity4"){
                component.find("inputUOM4").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputQuantity5"){
                component.find("inputUOM5").focus();
            }
            
/*             
            if(component.get("v.strCurrentInputField") == "inputUOM1"){
                component.find("inputQuantity2").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM2"){
                component.find("inputQuantity3").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM3"){
                component.find("inputQuantity4").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM4"){
                component.find("inputQuantity5").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM5"){
                component.find("inputQuantity1").focus();
            }
*/

//event.preventDefault();

            
//            component.set("v.strDebugMessage", "  / onfocusCheck 1:  " + component.get("v.strCurrentInputField"));
//           	component.set("v.strDebugMessage", "  / onfocusCheck 1.1     ");
            
            //bombs, no error:
            //looks like CASE is for code behind custom objects, not for writing code here
            /*
			var strNextField = 
                CASE(component.get("v.strCurrentInputField"),
                    "inputQuantity1", "inputUOM1",
                    "inputQuantity2", "inputUOM2",
                     ""
                    );
            */
            
            //NO, this is apex code:
            /*
            var strCurrentInputField = component.get("v.strCurrentInputField");
            switch on strCurrentInputField {
               when "inputQuantity1" {
                   component.find("inputUOM1").focus();
               }
               when "inputQuantity2" {
                   component.find("inputUOM2").focus();
               }
               when else {
               }
            };
            */
//           	component.set("v.strDebugMessage", "  / onfocusCheck 1.2   ");
//           	component.set("v.strDebugMessage", "  / onfocusCheck 2:  " + strNextField);
//			component.find(strNextField).focus();
            
            
        }

//zzz 
//component.set("v.strDebugMessage", "  / keyCheck   "); 
        
        //not work:
        //alert(event.getSource().get("v.name"));
		//component.set("v.strDebugMessage", "  / " + event.getSource().get("v.name"));
        
    },

//zzz 
	keyUOMCheck : function(component, event, helper){
        
        //THIS WORKS!!! 
        if (event.keyCode == 9) {
        	event.preventDefault();

            if(component.get("v.strCurrentInputField") == "inputUOM1"){
                component.find("inputQuantity2").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM2"){
                component.find("inputQuantity3").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM3"){
                component.find("inputQuantity4").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM4"){
                component.find("inputQuantity5").focus();
            }
            if(component.get("v.strCurrentInputField") == "inputUOM5"){
                component.find("inputQuantity1").focus();
            }

        };
        
    },
    
	onfocusCheck : function(component, event, helper){
        
		//component.set("v.strDebugMessage", "  / onfocusCheck    ");
		//component.set("v.strDebugMessage", "  /  " + event.getSource().get("v.name"));
		component.set("v.strCurrentInputField", event.getSource().get("v.name"));
    
       	//component.set("v.strDebugMessage", "  /  " + event.getSource().get("v.name"));
        
    },

    
})