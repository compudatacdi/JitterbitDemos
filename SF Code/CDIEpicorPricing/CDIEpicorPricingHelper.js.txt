({
	helperMethod : function() {
		
	},

//     loadData: function(component, event, helper, callback) {
	loadData: function(component, event, helper, strPart, callback) {
		//component.set("v.lblMessage", "1");
		//var action = component.get("c.loadSalesRepView");
		var action = component.get("c.apexCreateRecord");
        
        action.setParams({
            "strPart":strPart
        });
        
         
		action.setCallback(this, function(response) {
            var state = response.getState();
            if(component.isValid() && state == "SUCCESS") {         
                //var dp = JSON.parse(response.getReturnValue()); 
                
//                component.set("v.valuePriceCodeTemp", strPart);
//                component.set("v.valuePriceCodeTemp", response.getReturnValue() + "_xx");
                
                var strReturnValue = response.getReturnValue();
                component.set("v.valuePriceCodeTemp", strReturnValue + "_xxxx");  

                
                if(callback){
                    callback();
                }
            }
            else if (response.getState() === "ERROR") {
                //component.set("v.lblMessage", "error 1");
    
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "type":"error",
                    "title": "Error!",
                    "message": "Internal Server Error"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(action);
	},
    
    
    /*
    //https://salesforce.stackexchange.com/questions/305639/component-set-does-not-pass-value-from-helper-to-controller-via-component
    isConsoleNavigation : function(component, event, helper) {
      return new Promise($A.getCallback(function(resolve, reject) {
        
       	var workspaceAPI = component.find("workspace");
       	//var workspaceAPI = component.find("apexCreateRecord");
          
        workspaceAPI.isConsoleNavigation().then(function(response){
            component.set("v.consoleNavigation",response);
            resolve(response);
        })
        .catch(function(error) {
            console.log('isConsoleNavigation Error '+error);
            reject(error);
        });
      }));
    },
    */
    
    /*
    //https://salesforce.stackexchange.com/questions/299060/how-to-get-return-value-from-helper-class-to-controller-class
    createRecord: function(component, recordName) {
		component.set("v.lblMessage", "0");
        return new Promise(
            $A.getCallback(function(resolve, reject) {
                
                //component.set("v.lblMessage", "1"); >> 1

                var action = component.get("c.apexCreateRecord"); // calls an apex method
                //action.setParams({
                //    name: recordName
                //});
                //component.set("v.lblMessage", action);
                
                action.setCallback(this, function(response) {
                    var state = response.getState();
                    resolve(state);
                    
                    var abc123 = response.getReturnValue();
                    return abc123;
                    //resolve(abc123);
                    
                });
                $A.enqueueAction(action);
            })
        );
    },
	*/
    
//    getEpicorPricing : function(component, strPart, intQuantity, strUOM, strCustID) 
    getEpicorPricing : function(component, event, helper, strPart, intQuantity, strUOM, strCustID, callback) 
    //getEpicorPricing : function(component, strPart) 
    {
//component.set("v.valuePriceCode1", strPart);
        
		//var productCode = component.get("v.ProductCode");
        //alert("ProductCode: " + productCode);

//zzz new idea: (also a place below)
//return new Promise(
//$A.getCallback(function(resolve, reject) {

        
		var opportunityLineItemID = component.get("v.recordId");
        //alert("opportunityLineItemID: " + opportunityLineItemID);
		component.set("v.lblMessage", "Retrieving Information....");
        
        //note: 'c.getEpicorPricing' is actually calling out to the apex class CDIEpicorPricing_apex
        //		and needs to have the same name as the calling function here
		var sfOpportunityLineItem = component.get("c.getEpicorPricing");
//        sfOpportunityLineItem.setParams({"opportunityLineItemID":opportunityLineItemID});
        sfOpportunityLineItem.setParams({
            "opportunityLineItemID":opportunityLineItemID, 
            "strPart":strPart, 
            
            "intQuantity":intQuantity, 
            //experimenting with going direct to form and not take in parameter
            //"intQuantity":component.get("v.valueQuantity1"), 
            
            "strUOM":strUOM, 
            "strCustID":strCustID
        });
        
        
//component.set("v.lblMessage", "1....");

//zzz async caused here by setCallback
///*


    
    
    
        //NOTE: not sure why all this is necessary (instead of just 'component.set("v.buttonLabel", name);'), but it is
        sfOpportunityLineItem.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                
                //returns a dictionary with known values in each pair:
                var sfOpportunityLineItemData = response.getReturnValue();


                //for debugging:
                //component.set("v.lblMessage", sfOpportunityLineItemData["ListCode"]);
                component.set("v.lblMessage", sfOpportunityLineItemData + " / " 
                              + sfOpportunityLineItemData["ListCode"]
                              + " / " + sfOpportunityLineItemData["BasePrice"]
                              + " / " + intQuantity
+ " / " + sfOpportunityLineItemData["debugInfo"]
                );

//component.set("v.valuePriceCode1", strPart);
//zzz:
                //component.set("v.valuePrice1", sfOpportunityLineItemData["NetPrice"]);
                //component.set("v.valuePriceCode1", sfOpportunityLineItemData["ListCode"]);
                component.set("v.valuePriceTemp", sfOpportunityLineItemData["NetPrice"]);
                component.set("v.valuePriceCodeTemp", sfOpportunityLineItemData["ListCode"]); 
                

                if(callback){
                    callback();
                }
//zzz: add, then comment out because result is blank on form:
//return sfOpportunityLineItemData["NetPrice"];

//component.set("valuePrice1", "1");

//                component.set("v.valueOnHand", sfOpportunityLineItemData["EpicorOnHand"]);

//				component.set("v.lblSalesforceUpdateStatus", "Salesforce Status: OK");
                
                //refresh the form
//				$A.get('e.force:refreshView').fire();
                
            }
            else {
                //console.log("Failed with state: " + state);

                //note: state is always "ERROR" if it fails it seems
                //component.set("v.lblMessage", "Failed with state: " + state);

                let errors = response.getError();
                let message = 'Unknown error'; // Default error message
                // Retrieve the error message sent by the server
                if (errors && Array.isArray(errors) && errors.length > 0) {
                    message = errors[0].message;
                }
                // Display the message
                //console.error(message);
				component.set("v.lblMessage", "ERROR Status: " + message);
                
            }
//zzz: add, then comment out because result is blank on form:
//return sfOpportunityLineItemData["NetPrice"];

        });
        $A.enqueueAction(sfOpportunityLineItem);

//zzz new idea: (also a place above)
//	})
//);

        
//zzz: add, then comment out because it makes things not work:
//return sfOpportunityLineItemData["NetPrice"];
        
//*/

/*
//trying something new to invoke the apex method syncronously:
//var sfOpportunityLineItemData_X = sfOpportunityLineItem.getEpicorPricing();
//var sfOpportunityLineItemData_X = sfOpportunityLineItem.getEpicorPricing(opportunityLineItemID, strPart, intQuantity, strUOM, strCustID);

component.set("v.lblMessage", "2....");

        
//FAILING HERE:        
        //returns a dictionary with known values in each pair:
        var sfOpportunityLineItemData = response.getReturnValue();

component.set("v.lblMessage", "3....");
        
        //for debugging:
        //component.set("v.lblMessage", sfOpportunityLineItemData["ListCode"]);
        component.set("v.lblMessage", sfOpportunityLineItemData + " / " 
                      + sfOpportunityLineItemData["ListCode"]
                      + " / " + sfOpportunityLineItemData["BasePrice"]
                      + " / " + sfOpportunityLineItemData["debugInfo"]
                     );
        
component.set("v.lblMessage", "4....");
        
        //zzz:
        //component.set("v.valuePrice1", sfOpportunityLineItemData["NetPrice"]);
        //component.set("v.valuePriceCode1", sfOpportunityLineItemData["ListCode"]);
        component.set("v.valuePriceTemp", sfOpportunityLineItemData["NetPrice"]);
        component.set("v.valuePriceCodeTemp", sfOpportunityLineItemData["ListCode"]); 
        
        //refresh the form
        //$A.get('e.force:refreshView').fire();
				
		return sfOpportunityLineItemData;
*/
        
    }

    
})