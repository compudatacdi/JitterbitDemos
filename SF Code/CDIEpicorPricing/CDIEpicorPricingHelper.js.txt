({
	helperMethod : function() {
		
	},

    //poc for synchronous:
	loadData: function(component, event, helper, strPart, callback) {
		//component.set("v.strMessage", "1");
		//var action = component.get("c.loadSalesRepView");
		var action = component.get("c.apexCreateRecord");
        
        action.setParams({
            "strPart":strPart
        });
        
         
		action.setCallback(this, function(response) {
            var state = response.getState();
            if(component.isValid() && state == "SUCCESS") {         
                var strReturnValue = response.getReturnValue();
                component.set("v.strPriceCodeTemp", strReturnValue + "_xxxx");  
                
                if(callback){
                    callback();
                }
            }
            else if (response.getState() === "ERROR") {
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "type":"error",
                    "title": "Error!",
                    "message": "Internal Server Error"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(action);
	},
    
    //------------------- 
	getEpicorPart: function(component, event, helper, strPart, callback) {

        var epicorPart = component.get("c.getEpicorPart");
        epicorPart.setParams({
            "strPart":strPart
        });
        
		epicorPart.setCallback(this, function(response) {
            var state = response.getState();
            if(component.isValid() && state == "SUCCESS") {         
                var epicorPartData = response.getReturnValue();

                //for debugging:
				//component.set("v.strDebugMessage", "  / 1: " + epicorPartData["debug"] );   
                
                //component.set("v.strEpicorPartUOM", epicorPartData["PUM"]);
                if(epicorPartData["Epicor_Status"] != 'OK'){
                    //component.set("v.strDebugMessage", epicorPartData["Epicor_Status"] );
                    component.set("v.strMessage", epicorPartData["Epicor_Status"] ); 
                }
                else{
                    component.set("v.strEpicorPartUOM", epicorPartData["PUM"]);
                    component.set("v.strUOM1", epicorPartData["PUM"]);
                    component.set("v.strUOM2", epicorPartData["PUM"]);
                    component.set("v.strUOM3", epicorPartData["PUM"]);
                    component.set("v.strUOM4", epicorPartData["PUM"]);
                    component.set("v.strUOM5", epicorPartData["PUM"]);
                }
    
                if(callback){
                    callback();
                }
            }
            else if (response.getState() === "ERROR") {
                //component.set("v.strMessage", "error 1");
                
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "type":"error",
                    "title": "Error!",
                    "message": "Internal Server Error"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(epicorPart);
	},
    
    
    //-------------------
	getOpportunityLineItemProductCode: function(component, event, helper, callback) {
		//component.set("v.strMessage", "1");
		
        var opportunityLineItemID = component.get("v.recordId");
        
        //setup the call to apex method getOpportunityLineItemProductCode:
        var sfOpportunityLineItemProductCode = component.get("c.getOpportunityLineItemProductCode");
        sfOpportunityLineItemProductCode.setParams({
            "opportunityLineItemID":opportunityLineItemID
        });

		sfOpportunityLineItemProductCode.setCallback(this, function(response) {

            var state = response.getState();
            if(component.isValid() && state == "SUCCESS") {         

                //returns a dictionary with known values in each pair:
                var sfOpportunityData = response.getReturnValue();
                component.set("v.strOpportunityLineItemProductCode", sfOpportunityData["ProductCode"]);
                component.set("v.strEpicorCustId", sfOpportunityData["EpicorCustId"]);
                //component.set("v.strDebugMessage", "   / EpicorCustId: " + sfOpportunityData["EpicorCustId"]);

                //refresh the form
                //does not help ability to use v.strOpportunityLineItemProductCode after this is done though
                //$A.get('e.force:refreshView').fire();
				
                if(callback){
                    callback(); 
                }
            }
            else if (response.getState() === "ERROR") {
                //component.set("v.strMessage", "error 1");
    
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "type":"error",
                    "title": "Error!",
                    "message": "Internal Server Error"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(sfOpportunityLineItemProductCode);
	},
    
    //-------------------
    //getEpicorPricing : function(component, event, helper, strEpicorCustId, strPart, intQuantity, strUOM, callback) 
    getEpicorPricing : function(component, event, helper, strEpicorCustId, strPart, dQuantity, strUOM, callback) 
    {
		var opportunityLineItemID = component.get("v.recordId");
        //alert("opportunityLineItemID: " + opportunityLineItemID);
        //component.set("v.strMessage", "Retrieving Information....");
        //component.set("v.strDebugMessage", "Retrieving Information....");
        
        //note: 'c.getEpicorPricing' is actually calling out to the apex class CDIEpicorPricing_apex
        //		and needs to have the same name as the calling function here
        var ecPricing = component.get("c.getEpicorPricing");
        ecPricing.setParams({
            "opportunityLineItemID":opportunityLineItemID, 
            "strEpicorCustId":strEpicorCustId,
            "strPart":strPart,
            "dQuantity":dQuantity,
            "strUOM":strUOM
        });
            
		//component.set("v.strDebugMessage", "  / helper 1 "  ); 

        ecPricing.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                //returns a dictionary with known values in each pair:
                var ecPricingData = response.getReturnValue();
                
                //for debugging:
                //component.set("v.strDebugMessage", "  / 1: " + ecPricingData["debug"] );  
                
                //component.set("v.valuePriceTemp", ecPricingData["NetPrice"]);
                //component.set("v.valuePriceCodeTemp", ecPricingData["ListDescription"]);
                if(ecPricingData["Epicor_Status"] != 'OK'){ 
                    component.set("v.strMessage", ecPricingData["Epicor_Status"] );     
                }
                else{
                    component.set("v.strPriceTemp", ecPricingData["NetPrice"]);
                    
					var dTotalPrice = ecPricingData["NetPrice"] * dQuantity;
					component.set("v.dExtPriceTemp", dTotalPrice);

                    component.set("v.strPriceCodeTemp", ecPricingData["ListDescription"]);
                }
   
                //refresh the form
				//$A.get('e.force:refreshView').fire();
				//
                if(callback){
                    callback();
                }
                
            }
            else {
                //console.log("Failed with state: " + state);

                //note: state is always "ERROR" if it fails it seems
                //component.set("v.strMessage", "Failed with state: " + state);

                let errors = response.getError();
                let message = 'Unknown error'; // Default error message
                // Retrieve the error message sent by the server
                if (errors && Array.isArray(errors) && errors.length > 0) {
                    message = errors[0].message;
                }
                // Display the message
                //console.error(message);

				component.set("v.lblMessage", "ERROR Status: " + message);
                
            }


        });
        $A.enqueueAction(ecPricing);
        
    },
    
    //zzz
    doKeyDown: function(component, event)
    {
        // access the event object in the helper using getParam() or getParams()
        //console.log(event.getParam('keyCode'));
        //console.log(event.getParams().keyCode);
        
        //yields "undefined"
        //  ugh, needs to be "ui:inputText" instead of aura object
        //component.set("v.strDebugMessage", "  /  " + event.getParam('keyCode'));
        //component.set("v.strDebugMessage", "  /  " + event.getParams().keyCode);

    }
    
})