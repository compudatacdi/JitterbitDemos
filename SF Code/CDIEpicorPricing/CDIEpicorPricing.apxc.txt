global class CDIEpicorPricing_apex { 

public class myException extends Exception {}

    public static Map<String, String> epicorPartData = new Map<String, String>();
    public static Map<String, String> epicorPricingData = new Map<String, String>();
    public static Map<String, String> sfOpportunityData = new Map<String, String>();

    //poc method for asynchronous
    //https://salesforce.stackexchange.com/questions/299060/how-to-get-return-value-from-helper-class-to-controller-class
    @AuraEnabled  //needed to be able to call it from the aura realm
    public static String apexCreateRecord(String strPart) {
		
        String strReturnValue = strPart;
        
        return strReturnValue;
        
    }
	
    @AuraEnabled  //needed to be able to call it from the aura realm
    public static Map<String, String> getOpportunityLineItemProductCode(string opportunityLineItemID) {
        String strOpportunityLineItemProductCode = '';
        String strOpportunityId = '';
        String strAccountId = '';
            
        //get the related sf opportunity line item record from the id
        OpportunityLineItem[] opportunityLineItem;
        opportunityLineItem = [SELECT Id,OpportunityId,ProductCode FROM OpportunityLineItem WHERE Id = :opportunityLineItemID];
        for (OpportunityLineItem row : opportunityLineItem) {
            sfOpportunityData.put('ProductCode', row.ProductCode);
            strOpportunityId = row.OpportunityId;
        }

        //get the related sf opportunity record
        Opportunity[] opportunity;
        opportunity = [SELECT Id,AccountId FROM Opportunity WHERE Id = :strOpportunityId];
        for (Opportunity row : opportunity) {
            strAccountId = row.AccountId;
        }

        //get the related sf account record
        Account[] account;
        account = [SELECT Id,EpicorCustId__c FROM Account WHERE Id = :strAccountId];
        for (Account row : account) {
			sfOpportunityData.put('EpicorCustId', row.EpicorCustId__c);
        }

        return sfOpportunityData;

    } 
    
    @AuraEnabled  //needed to be able to call it from the aura realm     
    public static Map<String, String> getEpicorPart(string strPart) {

        String url = 'callout:CDI_Epicor/Erp.BO.PartSvc/Parts(\'PI03\',\'' + strPart.replace(' ', '%20') + '\')?%24select=PartNum%2CPUM';
        
		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes, 
            //		and return of variable never happens
            
            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req = new HttpRequest();
            req.setEndpoint(url);
            req.setMethod('GET');

            Http h = new Http();
            HttpResponse res = h.send(req);
            System.debug(res.getBody());

            //for debugging:
			//epicorPartData.put('debug', res.getBody());
            
            
            if(res.getBody().containsIgnoreCase('Record not found')){
                throw new myException('Part Number not on file');
            }
            if(res.getBody().containsIgnoreCase('REST API Exception')){
                //note: could be bad url, epicor down, paramaters changed, etc
                throw new myException('Login Failed due to REST API Exception');
            }
            if(res.getBody().containsIgnoreCase('Access is denied due to invalid credentials')){
                //full error:
                //	401 - Unauthorized: Access is denied due to invalid credentials.
                throw new myException('Login Failed due to invalid credentials');
            }

            JSONParser parser = JSON.createParser(res.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:

            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                    (parser.getText() == 'PartNum'
                     || parser.getText() == 'PUM')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                                        
                    string fieldValue; 
                    if(fieldName == '<currency field>')
                    {
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }
                    
                    epicorPartData.put(fieldName, fieldValue);
 
                    //KEEP: for debugging, to add debug log info
                    //System.debug('url_result: ' + url_result );
                    
                    epicorPartData.put('Epicor_Status', 'OK');
                    
                }
            }
        } catch (DmlException de) {
            epicorPartData.put('Epicor_Status', 'Epicor Error: ' + de.getMessage() );
        }
        catch (Exception e) {
            //note: possible errors and their potential causes:
            //	The URI is invalid		>> blank in the url, like part number
            epicorPartData.put('Epicor_Status', 'Epicor Error: ' + e.getMessage() );
        }

        return epicorPartData;

    }
    
    
    @AuraEnabled  //needed to be able to call it from the aura realm
    //public static Map<String, String> getEpicorPricing(string opportunityLineItemID, string strEpicorCustId, string strPart, integer intQuantity, string strUOM) {
    public static Map<String, String> getEpicorPricing(string opportunityLineItemID, string strEpicorCustId, string strPart, decimal dQuantity, string strUOM) {
        
        String strReturnValue = 'apex';
        String url = 'callout:CDI_Epicor/Erp.BO.PriceListInquirySvc/GetPriceListInquiry';

		try {
            //NOTE: if connection to epicor fails, this crashes hard, the catch never executes, 
            //		and return of variable never happens
            
            // Instantiate a new HTTP request, specify the method (GET) as well as the endpoint
            HttpRequest req = new HttpRequest();
            req.setEndpoint(url);
            req.setMethod('POST');

			//epicorPricingData.put('debugInfo', 'x: ' + opportunityLineItemID + ' / ' + strPart + ' / '  + intQuantity + ' / '  + strUOM + ' / '  + strCustID);
            
            Http h = new Http();

            String body = 
                '        { ' +
                '            "icCustID": "' + strEpicorCustId + '", ' +
                '            "icShipToNum": "", ' +
                '            "icPartNum": "' + strPart + '", ' +
                '            "icCustGroupCode": "", ' +
                '            "icProductCode": "", ' +
                '            "idQuantity": "' + dQuantity + '", ' +
                '            "icUOMCode": "' + strUOM + '", ' +
                '            "icWarehouseCode": "", ' +
                '            "icCurrencyCode": "", ' +
                '            "pageSize": 0, ' +
                '            "absolutePage": 0 ' +
                '        }' +            
                '';
            
            integer intHeaderLength = body.length();
            req.setHeader('Content-Length', String.valueOf(intHeaderLength));
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('accept', 'application/json');
            
            req.setBody(body);

            HttpResponse res = h.send(req);
            System.debug(res.getBody());

            //for debugging:
			//epicorPricingData.put('debug', res.getBody());
            

            if(res.getBody().containsIgnoreCase('Invalid UOM')){
                throw new myException('Invalid UOM');
            }
            if(res.getBody().containsIgnoreCase('REST API Exception')){
                throw new myException('Login Failed due to REST API Exception');
            }
            
            if(res.getBody().containsIgnoreCase('Access is denied due to invalid credentials')){
                //the full error:
                //	401 - Unauthorized: Access is denied due to invalid credentials.
                throw new myException('Login Failed due to invalid credentials');
                
            }

            JSONParser parser = JSON.createParser(res.getBody());
            //NOTE:  if epicor is down, this is where it fails because parser is empty:

            string strCurrentRecordType = '';
            integer intPriceListInquiryCount = 0;

            while (parser.nextToken() != null) {
                if(parser.getCurrentToken() == JSONToken.START_OBJECT)
                {
                    parser.nextToken();
                
                    strCurrentRecordType = parser.getText();
                    if(parser.getText() == 'PriceListInquiry')
                    {
                        //only want the first resulting record of type PriceListInquiry
                        intPriceListInquiryCount += 1;
                    }
                }

                if(intPriceListInquiryCount > 1){
                    break;
                }
                
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
					(intPriceListInquiryCount == 1) &&    
                    (parser.getText() == 'ListCode' || parser.getText() == 'CurrencyCode'
                     || parser.getText() == 'BasePrice' || parser.getText() == 'BreakPrice'
                     || parser.getText() == 'NetPrice' || parser.getText() == 'Quantity'
                     || parser.getText() == 'ListDescription')) 
                {
                    string fieldName = parser.getText();
                    
                    parser.nextToken();
                                        
                    string fieldValue; 
                    if(fieldName == 'Calculated_OnHand'
                       || fieldName == 'Calculated_Allocated' || fieldName == 'Calculated_Demand'
                       || fieldName == 'Calculated_Available')
                    {
                        //fieldValue = String.valueOf(decimal.valueOf(parser.getText()));
                        fieldValue = currency(parser.getText());
                    }
                    else
                    {
                        fieldValue = parser.getText();
                    }
                    
                    epicorPricingData.put(fieldName, fieldValue);
                    
                    //KEEP: for debugging, to add debug log info
                    //System.debug('url_result: ' + url_result );
                    
                    epicorPricingData.put('Epicor_Status', 'OK');
                    
                }
            }
        } catch (DmlException de) {
            epicorPricingData.put('Epicor_Status', 'Epicor Error: ' + de.getMessage() );
        }
        catch (Exception e) {
            epicorPricingData.put('Epicor_Status', 'Epicor Error: ' + e.getMessage() );
        }

        return epicorPricingData;

    }


    public static String currency(String i) {
        // - Error this doesn't handle negative number converts -15 to -14.999  instead of -15.001 before round
        //String s = ( Decimal.valueOf(i==null||i.trim()==''?'0':i).setScale(2) + 0.001 ).format();
        //return s.substring(0,s.length()-1);
    
        if (( i == null) || ( i == ''))
        {
            return '0';
        }
        else
        {
            string s;
            if ( Decimal.valueOf(i) >= 0 )
            {
                s =  ( Decimal.valueOf(i).setScale(2) + 0.001 ).format();
            }
            else
            {
                s = ( Decimal.valueOf(i).setScale(2) - 0.001 ).format();
            }
	        return s.substring(0,s.length()-1);
        }
    
    }
    
}